;  Copyright 2014 (c) Suneido Software Corp. All rights reserved.
;  Licensed under GPLv2.


;===============================================================================
; file: test_exports.def
; auth: Victor Schappert
; date: 20140710
; desc: Windows x86 module definition file to clean away __stdcall decorations
;       so names exported are the same in x86 and amd64
;===============================================================================

; TL;DR EXPLANATION:
; Keep this file in sync with the functions declared in test_exports.h.

; LONG EXPLANATION:
; Microsoft's compiler/linker decorates x86 __stdcall functions with a leading
; underscore prefix and a suffix consisting of an '@' sign followed by the
; number of bytes the called function will pop from the stack on return. On
; AMD64, Microsoft thankfully went to a single calling convention without any
; such decorative nonsense. However, this means that an exported __stdcall
; function has different names in the binary's symbol table depending on whether
; it is x86 or amd64.
;
;     e.g. __declspec(dllexport) int __stdcall f(int x)
;          on x86   => _f@4
;          on amd64 => f        // Really __stdcall is meaningless in x64
;
; So the purpose of this file, which is only included as a linker /DEF option in
; the x86 builds, is to undecorate x86 __stdcall function names. Thus it has to
; be kept in sync with test_exports.h.

EXPORTS
    ; ==========================[test_com/test_com.h]===========================
    ; DESIRED EXPORT NAME                         = INTERNAL NAME
    ; ==========================================================================

    TestCreateComObject

    ; ============================[test_exports.h]==============================
    ; DESIRED EXPORT NAME                         = INTERNAL NAME
    ; ==========================================================================

    TestVoid
    TestInt8
    TestInt16
    TestInt32
    TestInt64
    TestReturn1_0Float
    TestReturn1_0Double
    TestFloat
    TestDouble
    TestRemoveSignFromInt32
    TestCopyInt32Value
    TestSumTwoInt8s
    TestSumTwoInt16s
    TestSumTwoInt32s
    TestSumTwoFloats
    TestSumTwoDoubles
    TestSumThreeInt32s
    TestSumFourInt32s
    TestSumFiveInt32s
    TestSumSixInt32s
    TestSumSixMixed
    TestSumSevenInt32s
    TestSumEightInt32s
    TestSumNineInt32s
    TestSumInt8PlusInt64
    TestSumPackedInt8Int8Int16Int32
    TestSumPackedInt8x3
    TestSumManyInts
    TestDivideTwoInt32s
    TestStrLen
    TestHelloWorldReturn
    TestHelloWorldOutParam
    TestHelloWorldOutBuffer
    TestNullPtrOutParam
    TestReturnPtrPtrPtrDoubleAsUInt64
    TestSumString
    TestSumResource
    TestSwap
    TestReturnString
    TestReturnPtrString
    TestReturnStringOutBuffer
    TestReturnStatic_Packed_Int8Int8Int16Int32
    TestReturnStatic_Recursive_Int8Int8Int16Int32
    TestReturnStatic_Recursive_StringSum
    TestInvokeCallback_Int32_1
    TestInvokeCallback_Int32_1_2
    TestInvokeCallback_Int32_2
    TestInvokeCallback_Int64
    TestInvokeCallback_Mixed_6
    TestInvokeCallback_Packed_Int8Int8Int16Int32
    TestInvokeCallback_Recursive_StringSum
