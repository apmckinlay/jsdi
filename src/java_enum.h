/* Copyright 2013 (c) Suneido Software Corp. All rights reserved.
 * Licensed under GPLv2.
 */

#ifndef __INCLUDED_JAVA_ENUM_H___
#define __INCLUDED_JAVA_ENUM_H___

/**
 * \file java_enum.h
 * \author Victor Schappert
 * \since 20130628
 * \brief C++ declarations for enumerations whose primary definition is in Java.
 * \see global_refs.h
 *
 * This file is predominantly auto-generated.
 */

#include "jni_exception.h"

#include <iosfwd>

#include <jni.h>

namespace jsdi {

namespace java_enum {

/**
 * \brief Converts a C++ enumerator into a reference to the corresponding Java
 *        enumerator.
 * \tparam EnumType An enumeration which is defined in
 *         \link java_enum.h \endlink.
 * \param env Valid pointer to the JNI environment
 * \param e Enumerator to convert from C++ to JNI
 * \throw jni_exception If an error occurs getting the values of the Java
 *        enumeration from the JNI environment
 * \author Victor Schappert
 */
template <typename EnumType>
jobject cpp_to_jni_enum(JNIEnv * env, EnumType e);

/**
 * \brief Converts a JNI <code>jobject</code> reference to a Java enumerator
 *        into the corresponding C++ enumerator.
 * \tparam EnumType An enumeration which is defined in
 *         \link java_enum.h \endlink.
 * \param env Valid pointer to the JNI environment
 * \param e Valid reference to a Java enumerator to convert to C++
 * \throw jni_exception If an error occurs getting the ordinal value of
 *        <code>e</code> from the JNI environment
 * \author Victor Schappert
 */
template <typename EnumType>
EnumType jni_enum_to_cpp(JNIEnv * env, jobject e);

/**
 * \brief Converts an integer value to the corresponding C++ enumerator for the
 *        given enumeration type.
 * \tparam EnumType An enumeration which is defined in
 *         \link java_enum.h \endlink
 * \param e Ordinal value of the enumerator desired
 * \throw jni_exception If the ordinal <code>e</code> does not correspond to any
 *        members of the enumeration <code>EnumType</code>.
 * \author Victor Schappert
 */
template <typename EnumType>
EnumType ordinal_enum_to_cpp(int e);

// [BEGIN:GENERATED CODE last updated Fri Aug 01 00:03:55 PDT 2014]
/**
 * \brief C++ enumeration corresponding to the Java enumeration <code>suneido.jsdi.marshall.VariableIndirectInstruction</code>.
 * \author GenerateSharedEnums
 *
 * Auto-generated by <code>suneido.jsdi.tools.GenerateSharedEnums</code>.
 */
enum suneido_jsdi_marshall_VariableIndirectInstruction
{
    NO_ACTION,
    RETURN_JAVA_STRING,
    RETURN_RESOURCE,
};

/** \cond internal */
template <>
suneido_jsdi_marshall_VariableIndirectInstruction jni_enum_to_cpp(JNIEnv *, jobject);
/** \endcond */

/** \cond internal */
template <>
suneido_jsdi_marshall_VariableIndirectInstruction ordinal_enum_to_cpp(int);
/** \endcond */

/**
 * \brief C++ enumeration corresponding to the Java enumeration <code>suneido.jsdi.LogLevel</code>.
 * \author GenerateSharedEnums
 *
 * Auto-generated by <code>suneido.jsdi.tools.GenerateSharedEnums</code>.
 */
enum suneido_jsdi_LogLevel
{
    NONE,
    FATAL,
    ERROR,
    WARN,
    INFO,
    DEBUG,
    TRACE,
};

/** \cond internal */
template <>
jobject cpp_to_jni_enum(JNIEnv *, suneido_jsdi_LogLevel);
/** \endcond */

/** \cond internal */
template <>
suneido_jsdi_LogLevel jni_enum_to_cpp(JNIEnv *, jobject);
/** \endcond */

/** \cond internal */
template <>
suneido_jsdi_LogLevel ordinal_enum_to_cpp(int);
/** \endcond */

/**
 * \brief Stream insertion operator for \link jsdi::java_enum::suneido_jsdi_LogLevel\endlink
 * \author GenerateSharedEnums
 * \param o Stream to insert into
 * \param e Enumerator to insert
 *
 * Auto-generated by <code>suneido.jsdi.tools.GenerateSharedEnums</code>.
 */
std::ostream& operator<<(std::ostream& o, const suneido_jsdi_LogLevel& e);

// [END:GENERATED CODE]

} // namespace java_enum
} // namespace jsdi

#endif // __INCLUDED_JAVA_ENUM_H__
